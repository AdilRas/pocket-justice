{"version":3,"sources":["components/topNav/topNav.tsx","components/feed/feed.tsx","scripts/util.ts","components/pages/home.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["TopNav","props","onClick","handleMenuClick","selectedKeys","state","mode","Item","key","icon","FireOutlined","SettingOutlined","RiseOutlined","Meta","Card","Feed","useState","petitions","setPetitions","useEffect","axios","get","headers","then","response","data","map","petition","hoverable","style","display","cover","height","width","alt","src","imageHref","wordWrap","title","description","substr","Math","min","length","percent","round","signatures","goal","fetchData","a","Home","setState","handleMenuSort","handleClick","e","console","log","href","justifyContent","alignitems","App","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"+NA2BeA,EAvBA,SAACC,GAEd,OACE,6BACE,kBAAC,IAAD,CACEC,QAASD,EAAME,gBACfC,aAAc,CAACH,EAAMI,OACrBC,KAAK,cAEL,kBAAC,IAAKC,KAAN,CAAWC,IAAI,MAAMC,KAAM,kBAACC,EAAA,EAAD,OAA3B,OAGA,kBAAC,IAAKH,KAAN,CAAWC,IAAI,MAAMC,KAAM,kBAACE,EAAA,EAAD,OAA3B,OAGA,kBAAC,IAAKJ,KAAN,CAAWC,IAAI,MAAMC,KAAM,kBAACG,EAAA,EAAD,OAA3B,U,mCCZAC,EAASC,IAATD,KAqDOE,EApDF,SAACd,GAAgB,IAAD,EACOe,mBAAS,IADhB,mBACpBC,EADoB,KACTC,EADS,OAEDF,mBAAS,IAFR,6BAI3BG,qBAAU,WACRC,IAAMC,IAAI,kCAAmC,CAC3CC,QAAS,CACP,8BAA8B,sCAC9B,mCAAoC,UAErCC,MAAK,SAACC,GACPN,EAAaM,EAASC,WAEvB,IAOH,OACE,4BACGR,EAAUS,KAAI,SAACC,GACd,OACE,6BACE,kBAAC,IAAD,CACEC,WAAS,EACTC,MAAO,CAAEC,QAAS,QAClBC,MACE,yBACEF,MAAO,CAAEG,OAAQ,QAASC,MAAO,QACjCC,IAAI,UACJC,IAAKR,EAASS,aAIlB,kBAACvB,EAAD,CACEgB,MAAO,CAAEI,MAAO,QAASI,SAAU,cACnCC,MAAOX,EAASW,MAChBC,YAAaZ,EAASY,YAAYC,OAAO,EAAGC,KAAKC,IAAI,IAAKf,EAASY,YAAYI,WAEjF,kBAAC,IAAD,CAAUC,QAASH,KAAKI,MAAMlB,EAASmB,WAAanB,EAASoB,KAAO,KAAMlB,MAAO,CAAEC,QAAS,WAC5F,+BAAKH,EAASmB,WAAd,sBAA6CnB,EAASoB,a,yBChD9DC,EAAS,uCAAG,4BAAAC,EAAA,sEACW7B,IAAMC,IAAI,kCAAmC,CAClEC,QAAS,CACL,8BAA+B,wBAC/B,mCAAoC,UAJ9B,cACRE,EADQ,yBAQPA,EAASC,MARF,2CAAH,qDCiDAyB,G,OA3CF,WAAO,IAAD,EACSlC,mBAAS,OADlB,mBACVX,EADU,KACH8C,EADG,KAUXC,EAAiB,SAAC5C,KAoBxB,OACE,6BACE,6BACE,kBAAC,EAAD,CAAQ6C,YA9BU,SAACC,GACvBN,IACAO,QAAQC,IAAI,SAAUF,GACtBH,EAASG,EAAE9C,KACX4C,EAAe/C,IA0B2BA,MAAOA,IAC7C,uBAAGoD,KAAK,IAAIvD,QAAS8C,GAArB,SAEF,yBAAKnB,MAZL,CACFC,QAAS,OACT4B,eAAgB,SAChBC,WAAY,WAUR,kBAAC,EAAD,UC/BOC,MATf,WAEE,OADAL,QAAQC,IAAI,gBAEV,yBAAKK,UAAU,OACb,kBAAC,EAAD,QCGcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBnD,MAAK,SAAAoD,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLvB,QAAQuB,MAAMA,EAAMC,a","file":"static/js/main.24c4fce8.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Menu } from \"antd\";\r\nimport { FireOutlined, RiseOutlined, SettingOutlined } from \"@ant-design/icons\";\r\n\r\nconst TopNav = (props: any) => {\r\n  \r\n  return (\r\n    <div>\r\n      <Menu\r\n        onClick={props.handleMenuClick}\r\n        selectedKeys={[props.state]}\r\n        mode=\"horizontal\"\r\n      >\r\n        <Menu.Item key=\"hot\" icon={<FireOutlined />}>\r\n          Hot\r\n        </Menu.Item>\r\n        <Menu.Item key=\"new\" icon={<SettingOutlined />}>\r\n          New\r\n        </Menu.Item>\r\n        <Menu.Item key=\"top\" icon={<RiseOutlined />}>\r\n          Top\r\n        </Menu.Item>\r\n      </Menu>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TopNav;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { Card } from \"antd\";\r\nimport { Progress } from \"antd\";\r\nimport axios from 'axios';\r\nimport { fetchData } from '../../scripts/util';\r\nimport { getDefaultNormalizer } from \"@testing-library/react\";\r\n\r\nconst { Meta } = Card;\r\nconst Feed = (props: any) => {\r\n  const [petitions, setPetitions] = useState([]);\r\n  const [cards, setCards] = useState([]);\r\n\r\n  useEffect(() => {\r\n    axios.get('http://localhost:5000/petitions', {\r\n      headers: {\r\n        'Access-Control-Allow-Origin': `http://pocket-justice.herokuapp.com`,\r\n        'Access-Control-Allow-Credentials': 'true'\r\n      }\r\n    }).then((response: any) => {\r\n      setPetitions(response.data);\r\n    });\r\n  }, []);\r\n\r\n  const formatPreview = (description: string): string => {\r\n    const final = \"\";\r\n    return final;\r\n  } \r\n\r\n  return (\r\n    <ul>\r\n      {petitions.map((petition: any) => {\r\n        return (\r\n          <div>\r\n            <Card\r\n              hoverable\r\n              style={{ display: \"flex\" }}\r\n              cover={\r\n                <img\r\n                  style={{ height: \"200px\", width: \"auto\" }}\r\n                  alt=\"example\"\r\n                  src={petition.imageHref}\r\n                />\r\n              }\r\n            >\r\n              <Meta\r\n                style={{ width: \"500px\", wordWrap: \"break-word\" }}\r\n                title={petition.title}\r\n                description={petition.description.substr(0, Math.min(500, petition.description.length))}\r\n              />\r\n              <Progress percent={Math.round(petition.signatures / petition.goal * 100)} style={{ display: \"block\" }} />\r\n              <p> {petition.signatures} signatures out of {petition.goal}</p>\r\n            </Card>\r\n          </div>\r\n        );\r\n        })}\r\n      </ul>\r\n    \r\n  );\r\n};\r\n\r\nexport default Feed;\r\n","import axios from 'axios';\r\n\r\nconst fetchData = async () => {\r\n    const response =  await  axios.get('http://localhost:5000/petitions', {\r\n        headers: {\r\n            'Access-Control-Allow-Origin': 'http://localhost:3000',\r\n            'Access-Control-Allow-Credentials': 'true'\r\n        }\r\n    });\r\n    \r\n    return response.data;\r\n}\r\nexport { fetchData };","import React, { useState } from \"react\";\r\nimport TopNav from \"../topNav/topNav\";\r\nimport Feed from \"../feed/feed\";\r\nimport { fetchData } from '../../scripts/util';\r\n\r\nimport \"antd/dist/antd.css\"; // or 'antd/dist/antd.less'\r\n// import feed from \"../components/feed/feed\";\r\n\r\nconst Home = () => {\r\n  const [state, setState] = useState(\"hot\");\r\n\r\n  const handleMenuClick = (e: any) => {\r\n    fetchData();\r\n    console.log(\"click \", e);\r\n    setState(e.key);\r\n    handleMenuSort(state);\r\n  };\r\n\r\n  const handleMenuSort = (key: any) => {\r\n    if (key === \"hot\") {\r\n      // display sorted hot data\r\n    } else if (key === \"new\") {\r\n      // display sorted new data\r\n    } else if (key === \"top\") {\r\n      // display sorted top data\r\n    }\r\n  };\r\n\r\n  const style: {\r\n    display: string;\r\n    justifyContent: string;\r\n    alignitems: string;\r\n  } = {\r\n    display: \"flex\",\r\n    justifyContent: \"center\",\r\n    alignitems: \"center\",\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <div>\r\n        <TopNav handleClick={handleMenuClick} state={state} />\r\n        <a href=\"#\" onClick={fetchData}>Test</a> \r\n      </div>\r\n      <div style={style}>\r\n        <Feed />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n","import React from 'react';\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\nimport Home from './components/pages/home';\r\n\r\nfunction App() {\r\n  console.log('PUBLIC_URL: ' + process.env.PUBLIC_URL);\r\n  return (\r\n    <div className=\"App\">\r\n      <Home />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}